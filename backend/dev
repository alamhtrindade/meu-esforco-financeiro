#!/usr/bin/env bash
USERID="$(id -u)"
export USERID

ARTISAN="docker-compose exec api php artisan"
COMPOSER="docker-compose exec api composer"
NPM="docker-compose exec app-dev npm"
API_ENV_FILE=".env"
API_ENV_FILE_EXAMPLE=".env.example"
ICON="ü§ñ"

project_dir=$(pwd)

show_commands () {
    echo
    echo "$ICON Comandos dispon√≠veis:"
    echo
	echo "sh dev build             - (Re)Builda as imagens dos containers"
	echo "sh dev start-dev         - Inicia os containers em modo Dev"
	echo "sh dev status            - Exibe o status dos containers"
	echo "sh dev stop              - Desliga os containers"
	echo "sh dev artisan COMANDO   - Executa os comandos do Artisan"
	echo "sh dev composer COMANDO  - Executa os comandos do Composer"
	echo "sh dev test              - Executa os testes da aplica√ß√£o (PHPUnit)"
	echo "sh dev clear-logs        - Limpa o arquivo de logs \"laravel.log\""
    echo
}

compose_build () {
    echo
    echo "$ICON Buildando as imagens..."
    echo
    check_env_exists
    docker-compose build
}

compose_up_dev () {
    echo
    echo "$ICON Iniciando os containers em modo Dev..."
    echo
    check_env_exists
    docker-compose up -d nginx api traefik postgresql10
    execute_composer_install
}

execute_composer_install () {
    echo
    echo "$ICON Instalando depend√™ncias PHP (vendor)..."
    echo
    $COMPOSER install
}

compose_status () {
    echo
	echo "$ICON Exibindo o status dos containers..."
    echo
	docker-compose ps
}

compose_down () {
    echo
	echo "$ICON Parando os containers..."
    echo
	docker-compose down
}

compose_logs () {
    shift 1

    if [ $# -gt 0 ]; then
        echo
        echo "$ICON Exibindo logs do container $*"
        echo
	    docker-compose logs -f "$@"
    else
        echo
	    echo "$ICON Exibindo logs de todos os containers"
        echo
	    docker-compose logs -f
    fi
}

check_api_is_up () {
    if ! docker-compose ps | grep -F -q "api"; then
        echo
        echo "$ICON Voc√™ precisa iniciar os containers da aplica√ß√£o!"
        echo "$ICON Comandos: sh dev start-dev"
        echo
        exit 1
    fi
}

execute_artisan () {
    check_api_is_up
    echo
    echo "$ICON Executando Artisan..."
    echo
    shift 1
    $ARTISAN "$@"
}

execute_composer () {
    check_api_is_up
    echo
    echo "$ICON Executando Composer..."
    echo
    shift 1
    $COMPOSER "$@"
}

execute_tests () {
    check_api_is_up
    echo
    echo "$ICON Executando testes..."
    echo
    docker-compose exec api ./vendor/bin/phpunit --colors --coverage-text=tests/coverage.txt --coverage-html=tests/coverage/
    xdg-open api/tests/coverage/index.html
}

start_dev () {
    compose_down
    compose_up_dev
    echo
    echo "$ICON Iniciando aplica√ß√£o em modo Dev"
    echo
}

check_env_exists () {
    if [ ! -f "$API_ENV_FILE" ]; then
        echo "$ICON Criando arquivo de configura√ß√£o $API_ENV_FILE..."
        cp $API_ENV_FILE_EXAMPLE $API_ENV_FILE
        echo
    fi
}

clear_logs() {
    echo
    echo "$ICON Limpando arquivos de log"
    echo
    tail /dev/null | sudo tee ./storage/logs/laravel.log
}

if [ $# -gt 0 ]; then

    case "$1" in

    "build") compose_build ;;
    "start-dev") start_dev ;;
    "status") compose_status ;;
    "stop") compose_down ;;
    "logs") compose_logs "$@" ;;
    "artisan") execute_artisan "$@" ;;
    "composer") execute_composer "$@" ;;
    "test") execute_tests ;;
    "clear-logs") clear_logs ;;
    *) show_commands;;

    esac

else
    show_commands
fi

